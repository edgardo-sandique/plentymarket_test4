{% extends 'PlentyPluginShowcase::templates.ExamplePage' %}

{% block Content %}

<h1 id="plugin-structure">Plugin structure</h1>
<div class="api-docs-basics">
    <p>
        All plugins need to be organised in a specific structure. You can create a new plugin from a Git repository. This will create all required files and folders automatically as follows:
    </p>
</div>

<div class="code-container">
<pre class="prettyprint lang-plain grey-back">
PluginDirectory/
    +-- meta/
    |   +-- images/
    |       |   // preview images showing this plugin
    |       +-- preview_[0-6].[png | jpeg]
    |       |   // plugin icons
    |       +-- icon_plugin_[xs | sm | md].[png | jpeg]
    |       |   // authors logo
    |       +-- icon_author_[xs | sm | md].[png | jpeg]
    |
    +-- resources/
    |   +-- css/
    |   |   +-- // .css and .scss files
    |   +-- images/
    |   |   +-- // images
    |   +-- js/
    |   |   +-- // JavaScript and Coffee-Script
    |   +-- lang/
    |   |   +-- // language files
    |   +-- documents/
    |   |   +-- // fonts, pdf-files or other resources
    |   +-- views/
    |       +-- // twig templates (can be organised in subdirectories)
    |
    +-- src/
    |   +-- // plugin source code
    |
    |-- test/
    |   +-- // tests will be executed before build
    |
    +-- config.json // <a href="#plugin-options">admin's plugin options</a>
    +-- plugin.json // <a href="#plugin-information">plugin information</a>
    +-- README.md
</pre>
</div>


<h2 id="plugin-information">Plugin information</h2>
<div class="api-docs-basics">
    <p>
        All information about your plugin is defined in a <code>plugin.json</code> file. This file defines the service
        provider of your plugin, which will be called by plentymarkets to register and run your plugin.
    </p>

    <table class="table table-striped table-responsive table-bordered table-hover">
        <thead>
            <tr>
                <th>Property</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td>version</td>
                <td>The version of your plugin. We recommend to use <a href="http://semver.org/" target="_blank">semantic versioning</a>.</td>
            </tr>
            <tr>
                <td>name</td>
                <td>The name of your plugin</td>
            </tr>
            <tr>
                <td>description</td>
                <td>The description of your plugin</td>
            </tr>
            <tr>
                <td>author</td>
                <td>The author of the plugin</td>
            </tr>
            <tr>
                <td>keywords</td>
                <td>An array of keywords describing your plugin</td>
            </tr>
            <tr>
                <td>type</td>
                <td>The type of your plugin. Use "<i>export</i>" for plugins defining new export formats or "<i>template</i>" for frontend plugins.</td>
            </tr>
            <tr>
                <td>require</td>
                <td>An array of dependencies of other plugins including required version, e.g. <i>PlentyPluginShowcase-1.0.0</i></td>
            </tr>
            <tr>
                <td>namespace</td>
                <td>The root namespace of your plugin</td>
            </tr>
            <tr>
                <td>serviceProvider</td>
                <td>The service provider to hook-up</td>
            </tr>
        </tbody>

    </table>
</div>

<div class="route-container">
<code>/plugin.json</code>
</div>

<div class="code-container grey-back">
    <pre class="prettyprint lang-js grey-back">
{
    "version"           : 0.1,
    "name"              : "MyPlugin",
    "description"       : "Description of your plugin",
    "author"            : "Your name",
    "keywords"          : ["plentymarkets", "plugins"],
    "type"              : "template",
    "require"           : [],
    "namespace"         : "PluginNamespace",
    "serviceProvider"  : "PluginNamespace\\Providers\\MyServiceProvider"
}</pre>
</div>

<h2 id="plugin-options">Admin options</h2>
<div class="api-docs-basics">
    <p>
        You can define multiple options that will be displayed in the <b>Start » Plugins » Tab: Plugins</b> menu to be configured by admin users.
        The value of each option can be accessed in your hack code by using the <code>ConfigRepository</code> or from
        Twig templates by using the <code>config()</code> macro.
    </p>

    <p>
        All admin options can be defined in an array of configurations in the <code>config.json</code>. Each configuration needs
        the following properties:
    </p>

    <table class="table table-striped table-responsive table-bordered table-hover">
        <thead>
            <tr>
                <th>Property</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            <tr>
              <td>tab</td>
              <td>Organises the <code>config.json</code> options into tabs. Tabs are optional.</td>
            </tr>
            <tr>
                <td>key</td>
                <td>The identifier of the configuration. This key can be used to access the options value.</td>
            </tr>
            <tr>
                <td>label</td>
                <td>The label of this configuration. Will be displayed in the <b>Start » Plugins » Tab: Plugins</b> menu.</td>
            </tr>
            <tr>
                <td>type</td>
                <td>Defines the presentation of this configuration. Possible values:<br /><b>"dropdown"</b> = Possible values are displayed in a drop-down menu.<br /><b>"text"</b> = Displays a text field for text input.<br /><b>"checkbox"</b> = Displays a checkbox.<br /><b>"multi_select"</b> = Displays a multi-select box. Possible values can be activated or deactivated.<br /><b>"category_select"</b> = Displays a category picker.</td>
            </tr>
            <tr>
                <td>possibleValues</td>
                <td>Defines available values of a dropdown or multi-select option (obsolete if type is "text", "checkbox" or "category_select")</td>
            </tr>
            <tr>
                <td>default</td>
                <td>The default value of this option</td>
            </tr>
        </tbody>
    </table>
</div>
<div class="route-container">
<code>/config.json</code>
</div>
<div class="code-container">
    <pre class="prettyprint lang-js grey-back">
[
    {
        "tab"       : "Categories",
        "key"       : "global.category.home",
        "label"     : "Home page",
        "type"      : "category_select"
    },
    {
        "tab"       : "Header",
        "key"       : "header.company_logo_align",
        "label"     : "Align company logo",
        "type"      : "dropdown",
        "possibleValues": {
            "0" : "Left",
            "1" : "Center",
            "2" : "Right"
        },
        "default"   : "0"
    },
    {
        "tab"       : "Footer",
        "key"       : "footer.col_1_title",
        "label"     : "Title of first column",
        "type"      : "text",
        "default"   : "Shop"
    },
    {
        "tab"       : "Item",
        "key"       : "item.data",
        "label"     : "Show item information",
        "type"      : "multi_select",
        "possibleValues": {
            "item.technical_data": "Technical data",
            "item.description": "Description"
        },
        "default"   : "all"
    },
    {
       "tab"       : "Basket",
       "key"       : "basket.variations",
       "label"     : "Show Change variation button",
       "type"      : "checkbox",
       "default"   : true
   }
]</pre>
</div>

<h4>Accessing plugin options from <code>HackClass.hh</code></h4>
    <div class="code-container">
        <pre class="prettyprint lang-hack grey-back">
// access configuration from hack
function getTitle(ConfigRepository $config):string
{
    if( $config->get('MyPlugin.show_title') == "1" )
    {
        return $config->get('MyPlugin.title_text');
    }
    else
    {
        return "";
    }
}</pre>
    </div>

<h4>Accessing plugin options from <code>Template.twig</code></h4>
<div class="code-container">
<pre class="prettyprint lang-twig grey-back">
{% verbatim %}{% if config('MyPlugin.show_title') == "1" %}
    &lt;h1&gt;{{ config('MyPlugin.title_text') }}&lt;/h1&gt;
{% endif %}
{% endverbatim %}</pre>
</div>

<h1 id="plugin-provisioning">Plugin provisioning</h1>

<div class="api-docs-basics">
    <p>
        After creating a plugin with the respective structure and files, the plugin needs to be provisioned. Let's have a look on how to provision a plugin.
    </p>
</div>

<h2 id="add-repository">Adding a Git repository to the plentymarkets inbox</h2>
<div class="api-docs-basics">

<p>Proceed as described here to add a Git repository to your plentymarkets inbox.</p>

<ol>
<li>Go to <strong>Start » Plugins » Tab: Plugins</strong>.</li>
<li>Click on <strong>Add plugin</strong>.<br />
→ The <strong>New plugin</strong> window is displayed.</li>
<li>Click on <strong>Git</strong>.<br />
→ The <strong>Settings</strong> window opens.</li>
<li>Enter the login details for the Git repository.</li>
<li>Click on <strong>Test connection</strong>.<br />
&rarr; Connectivity to the Git repository is checked and established.<br />
&rarr; The drop-down menu <strong>Branch</strong> can be selected.</strong></li>
<li>Select the branch of the repository that you want to clone and edit.</li>
<li><strong>Save</strong> your settings.<br />
→ The plugin repository is cloned to the plentymarkets inbox.<br />
→ The plugin is added to the plugin list.<br />
→ The plugin is added to the plugins in the <strong>Git</strong> tab.</li>
</ol>
</div>


<h2 id="provisioning">Provisioning plugins</h2>
<div class="api-docs-basics">


    <p>
        The provisioning process is started from the <b>Start » Plugins » Tab: Plugins</b> menu of the plentymarkets backend. Before provisioning, select the clients (stores) that you want to provision the plugins for.</p>
    <ul>
        <li>Clicking the <b>Paper airplane</b> icon will start the provisioning process for all plugins that have a check mark in the <b>Stage</b> column of the plugin list.</li>
        <li>Clicking on the <b>Globe</b> icon will start the provisioning process for all plugins that have a check mark in the <b>Productive</b> column.<br />
        &rarr; You can not start the provisioning process for individual plugins.<br />
        &rarr; By default, the check mark is identical to the current state of the plugin in the environment. Newly added plugins have a check mark by default.</li>
    </ul>

    <p>
    You need to provision the plugins if one of the following has occurred since the last provisioning process:
    </p>

    <ul>
        <li>new plugins were added and activated</li>
        <li>plugins were updated</li>
        <li>plugins were activated</li>
        <li>plugins were deactivated</li>
        <li>provisioning errors were fixed</li>
        <li>currently provisioned plugins were deleted</li>
    </ul>

</div>

<h1 id="ide-support">Recommended IDEs</h1>
    <div class="api-docs-basics">
        <p>
            We recommend using an IDE which supports the Hack language and Twig syntax.
            For this purpose, we suggest using one of the following IDEs. For improved language support and easier development,
            it is recommended that you <a href="https://docs.hhvm.com/hhvm/installation/introduction" target="_blank">install HHVM</a>
            (including a Hack compiler) locally.
        </p>
    </div>

<h2 id="atom-nuclide">Atom with Nuclide</h2>
<div class="api-docs-basics">
    <p>Facebook provides this IDE for Hack development. It can be extended to also support Twig syntax.</p>
</div>
<h3>Installation</h3>
<div class="api-docs-basics">
    <ol>
        <li>
            <a href="https://github.com/atom/atom/releases/latest" target="_blank">Download</a>
            and <a href="https://atom.io/docs/latest/getting-started-installing-atom" target="_blank">install</a>
            Atom IDE
        </li>
        <li>
            <a href="http://nuclide.io/docs/editor/setup" target="_blank">Install Nuclide Plugin</a><sup>*</sup> for Hack language support
        </li>
        <li>
            <a href="https://atom.io/packages/php-twig" target="_blank">Install Twig Plugin</a><sup>*</sup> for Twig syntax highlighting
        </li>
    </ol>
    <p>
        *) All required Atom packages can be found using the embedded package control pane of the Atom IDE. This pane can be found in Atom: <i>Settings</i> > <i>Install</i>.
    </p>
</div>
<h2 id="sublime-text">Sublime Text</h2>

<div class="api-docs-basics">
    <p>As an alternative to the Atom IDE, we also recommend Sublime Text with the respective plugins for syntax highlighting.</p>
</div>

<h3>Installation</h3>
<div class="api-docs-basics">
    <ol>
        <li><a href="https://www.sublimetext.com/2" target="_blank">Install Sublime Text</a></li>
        <li>Install Sublime Text's <a href="https://packagecontrol.io/installation" target="_blank">Package-Control</a></li>
        <li>Install <a href="https://packagecontrol.io/packages/Hacklang%20Typechecker%20and%20Autocompletion" target="_blank">Hack Plugin</a></li>
        <li>Install <a href="https://packagecontrol.io/packages/PHP-Twig" target="_blank">Twig Plugin</a></li>
    </ol>
</div>

{% endblock %}
