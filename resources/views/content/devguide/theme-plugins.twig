{% extends 'PlentyPluginShowcase::templates.ExamplePage' %}

{% block Content %}

<h1 id="theme-introduction">Introducing theme plugins</h1>
<div class="api-docs-basics">
    <p>
        On this page, you will find an overview of relevant information about theme plugins. Theme plugins let you change the colour and style of your template in an easy and convenient way. After provisioning a theme once, you can activate or deactivate the theme in the plentymarkets back end without further configuration.
    </p>
    <p>
        Theme plugins make use of a <a href="/tutorials/container">template container</a> in the Ceres template and extend the CSS of Ceres. In doing so, the CSS of the theme will override all concerned classes in the Ceres stylesheet. Classes that are not styled in the CSS of the theme but in the Ceres stylesheet are not affected.
    </p>
</div>

<h3 id="theme-further-reading">Further reading</h3>

<div class="api-docs-basics">
    <ul>
        <li>
            <a href="/dev-doc/basics#plugin-structure">Plugin structure</a>
        </li>
        <li>
            <a href="/tutorials/design">Installing a template</a>
        </li>
        <li>
            <a href="/devguide/template-plugins">Developing template plugins</a>
        </li>
        <li>
            <a href="/tutorials/container">Template containers</a>
        </li>
        <li>
            <a href="/marketplace/plugin-requirements">Plugin requirements for plentyMarketplace</a>
        </li>
        <li>
            <a href="http://twig.sensiolabs.org/doc/templates.html#template-inheritance" target="_blank">Template inheritance</a>
        </li>
        <li>
            <a href="http://twig.sensiolabs.org/doc/templates.html#including-other-templates" target="_blank">Including other templates</a>
        </li>
    </ul>
</div>

<h1 id="theme-create-style">Creating a theme</h1>
<div class="api-docs-basics">
    <p>
        Create the following files and develop a theme that changes the background colour of the template plugin. If you want to offer the theme in the plentyMarketplace, pay attention to our <a href="/marketplace/plugin-requirements">plugin requirements</a>.
    </p>
</div>

<h2 id="theme-structure">Changing the CSS of a template</h2>
<div class="api-docs-basics">
    <p>
        This basic theme plugin for changing the CSS of a template consists of a <code>plugin.json</code> file, a ServiceProvider, a Container, a CSS file and a TWIG template.
    </p>
</div>

<!-- Folder structure -->
<div class="code-container">
<pre class="prettyprint lang-plain grey-back">
Theme/
    +-- resources/
    |   +-- css/
    |   |   +-- main.css // theme stylesheet
    |   |
    |   +-- views/
    |       +-- content/
    |           +-- Theme.twig // content to be injected into the Ceres template container
    +-- src/
    |   +-- Containers/
    |   |   +--ThemeContainer.php
    |   |
    |   +-- Providers/
    |       +-- ThemeServiceProvider.php
    |
    +-- plugin.json // plugin information
</pre>
</div>
<!-- Folder structure end -->

<h3 id="code-pluginjson">Code for the plugin.json</h3>

<!-- Code example -->
<div class="route-container">
    <code>ThemePlugin/plugin.json</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "name"                  :"Theme",
    "description"           :"Basic theme plugin",
    "namespace"             :"Theme",
    "author"                :"Your name",
    "keywords"              : ["theme", "Ceres", "template"],
    "type"                  :"theme",
    "require"               : [],
    "serviceProvider"       :"Theme\\Providers\\ThemeServiceProvider",
    "dataProviders"         :
    [
        {
            "key"           :"Theme\\Containers\\ThemeContainer",
            "name"          :"Dark background",
            "description"   :"Change the background colour of the Ceres template"
        }
    ]
}
</pre>
<button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
</div>
<div class="alert alert-info" role="alert">
    <b>Explanation</b>: Specify the <code>serviceProvider</code> and the <code>dataProviders</code>.
</div>
<!-- Code example end -->

<h3 id="code-serviceprovider">Code for the ServiceProvider</h3>

<!-- Code example -->
<div class="route-container">
    <code>Theme/src/Providers/ThemeServiceProvider.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums code-example">
&lt;?php

namespace Theme\Providers;

use Plenty\Plugin\ServiceProvider;

class ThemeServiceProvider extends ServiceProvider
{

	/**
	 * Register the service provider.
	 */
	public function register()
	{

	}
}
</pre>
<button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
</div>
<!-- Code example end -->

<h3 id="code-themecontainer">Code for the Container</h3>

<!-- Code example -->
<div class="route-container">
    <code>Theme/src/ThemeContainer.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums code-example">
&lt;?php

namespace Theme\Containers;

use Plenty\Plugin\Templates\Twig;

class ThemeContainer
{
    public function call(Twig $twig):string
    {
        return $twig->render('Theme::content.theme');
    }
}
</pre>
<button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
</div>
<div class="alert alert-info" role="alert">
    <b>Explanation</b>: Specify the path to the TWIG template <code>Theme::content.theme</code>.
</div>
<!-- Code example end -->

<h3 id="code-template">Code for the TWIG template</h3>

<!-- Code example -->
<div class="route-container">
    <code>Theme/resources/views/content/Theme.twig</code>
</div>
<div class="code-container">
{% raw %}
<pre class="prettyprint lang-twig grey-back linenums code-example">
&lt;link rel="stylesheet" href="{{ plugin_path('Theme') }}/css/main.css">
</pre>
{% endraw %}
<button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
</div>
<div class="alert alert-info" role="alert">
    <b>Explanation</b>: Specify the path to the CSS file <code><span>{</span>{ plugin_path('Theme') }}/css/main.css</code>. You can link one or multiple stylesheets here. Note that only CSS files are allowed. SCSS files must be compiled into one or multiple CSS files first.
</div>
<!-- Code example end -->

<h3 id="code-stylesheet">Code for the CSS file</h3>

<!-- Code example -->
<div class="route-container">
    <code>Theme/resources/css/main.css</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
/* Change background colour */
body {
    background-color: #808080;
}
</pre>
<button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
</div>
<div class="alert alert-info" role="alert">
    <b>Explanation</b>: Change the style in the stylesheet according to your preferences. This stylesheet will extend the existing stylesheet of the template plugin. This CSS will have a higher priority than the CSS of the template plugin.
</div>
<!-- Code example end -->

<h2 id="theme-activate">Activating a theme</h2>
<div class="api-docs-basics">
    <p>
        Create the theme first, then <a href="/dev-doc/basics#add-repository">add</a> the plugin to the plentymarkets inbox and <a href="/dev-doc/basics#provisioning">provision</a> it in <b>Productive</b>. After provisioning the theme plugin once, you can activate and deactivate it without further configuration.
    </p>
    <ol>
        <li>
            Open the plentymarkets back end.
        </li>
        <li>
            Go to <b>Start » Plugins</b>.
        </li>
        <li>Click on the <b>Content</b> tab.<br />
            → A list of all plugins that provide data will be displayed.
        </li>
        <li>
            Activate the <b>Template: Style for Ceres - experimental -</b> container in the <b>Dark background (Theme)</b> area.
        </li>
        <li>
            <b>Save</b> the settings.
        </li>
        <li>
            Refresh the browser window.<br />
            → The new theme will be loaded.
        </li>
    </ol>
</div>

<h1 id="theme-edit-template">Editing a template plugin</h1>
<div class="api-docs-basics">
    <p>
        A theme plugin can not only extend the CSS file of the template plugin, but also change the entire markup of individual template components or the overall page design.
    </p>
    <p>
        Adding your own markup and style to an existing template plugin is facilitated and maintaining the code of your theme plugin is not directly linked to the code of the template plugin, i.e. changes made in your theme plugin are not overwritten when the template plugin is updated.
    </p>
</div>

<h2 id="theme-page-structure">Page structure</h2>
<div class="api-docs-basics">
    <p>
        You can either change parts of the page design or edit the entire page design to meet your needs. The page design of Ceres consists of two main sections, the <b>head</b> and the <b>body</b>. The body itself is divided into multiple sub-sections called wrappers. These wrappers include different components, partials or pages. The most important wrapper is the main wrapper containing the <b>header</b>, the <b>page body</b> and the <b>footer</b> of your online store.
    </p>
</div>

<figure>
    <a data-toggle="modal" data-target="#modal1" href="#">
        <img class="img-responsive img-pretty" src="{{ plugin_path('PlentyPluginShowcase') }}/images/devguide/Ceres_PageDesign.png" />
    </a>
</figure>

<h2 id="theme-change-footer">Changing the page design</h2>
<div class="api-docs-basics">
    <p>
        The TWIG <a href="http://twig.sensiolabs.org/doc/2.x/tags/include.html" target="_parent">include statement</a> is used for this purpose. In the example below the <code>ThemeFooter.twig</code> file is included in the <code>ThemePageDesign.twig</code> file. You can simply create your own footer template and replace the Ceres footer.
    </p>
</div>

<h3 id="code-themeserviceprovider">Code for the ServiceProvider</h3>
<div class="api-docs-basics">
    <p>
        The code of the ServiceProvider must be updated to inject your own components into the template plugin.
    </p>
</div>

<!-- Code example -->
<div class="route-container">
    <code>Theme/src/Providers/ThemeServiceProvider.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums code-example">
&lt;?php

namespace Theme\Providers;

use IO\Helper\TemplateContainer;
use Plenty\Plugin\Events\Dispatcher;
use Plenty\Plugin\ServiceProvider;
use Plenty\Plugin\Templates\Twig;

class ThemeServiceProvider extends ServiceProvider
{

	/**
	 * Register the service provider.
	 */
	public function register()
	{

	}

    /**
	 * Boot a template component that will be displayed in the template plugin instead of the original template component.
	 */
	public function boot(Twig $twig, Dispatcher $eventDispatcher)
    {
        $eventDispatcher->listen('tpl.item', function(TemplateContainer $container, $templateData)
        {
            $container->setTemplate("Theme::content.ThemeSingleItem");
        }, 0);
    }
}
</pre>
<button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
</div>
<div class="alert alert-info" role="alert">
    <b>Explanation</b>: Add the dependencies for the <code>TemplateContainer</code>, <code>Dispatcher</code> and <code>Twig</code> classes.<br /><br />Add the <code>boot()</code> function and specify one or multiple components (here <code>tpl.item</code>) as well as the TWIG template(s) for the component(s) (here <code>Theme::content.ThemeSingleItem</code>). We will add the TWIG template in a later step.<br /><br />A list of available components can be found in the <a href="https://github.com/plentymarkets/plugin-ceres/blob/stable/src/Providers/TemplateServiceProvider.php" target="_blank">TemplateServiceProvider</a> of the Ceres template plugin.
</div>
<!-- Code example end -->

<h3 id="code-footer">Code for the Footer template</h3>

<!-- Code example -->
<div class="route-container">
    <code>Theme/resources/views/content/ThemeFooter.twig</code>
</div>
<div class="code-container">
{% raw %}
<pre class="prettyprint lang-twig grey-back linenums code-example">
&lt;div>
    Insert footer markup here
&lt;/div>
</pre>
{% endraw %}
<button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
</div>
<div class="alert alert-info" role="alert">
    <b>Explanation</b>: By using the <code>include</code> statement in the <code>ThemePageDesign.twig</code> file, we include the content of this template in our PageDesign template.
</div>
<!-- Code example end -->

<h2 id="theme-change-page">Changing the template of a page</h2>
<div class="api-docs-basics">
    <p>The <a href="http://twig.sensiolabs.org/doc/2.x/tags/extends.html" target="_blank">extends tag</a> is used to extend a template from another template. In the example below, the <code>ThemeBasket.twig</code> file extends the <code>ThemePageDesign.twig</code> file. TWIG <a href="http://twig.sensiolabs.org/doc/2.x/tags/block.html" target="_blank">blocks</a> are used, to define the content that will be inserted in the main wrapper of the page design. We only have to edit the ServiceProvider of our theme and create the page template, e.g. the basket.
    </p>
</div>

<!-- Insert code example for service provider where new basket template path is registered -->

<h3 id="code-template-basket">Code for the Basket template</h3>

<!-- Code example -->
<div class="route-container">
    <code>Theme/resources/views/content/ThemeBasket.twig</code>
</div>
<div class="code-container">
{% raw %}
<pre class="prettyprint lang-twig grey-back linenums code-example">
&lt;div>
    Insert footer markup here
&lt;/div>
</pre>
{% endraw %}
<button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
</div>
<div class="alert alert-info" role="alert">
    <b>Explanation</b>: ##
</div>
<!-- Code example end -->

<h2 id="theme-change-page-component">Changing the template of a page component</h2>
<div class="api-docs-basics">
    <p>
        ##
    </p>
</div>

<!-- Insert code example for service provider where new basket component template path is registered -->

<!-- Modal -->
<div class="modal fade" id="modal1" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog img-horizontal" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">The PageDesign template of Ceres</h4>
            </div>
            <div class="modal-body">
                <figure>
                    <img class="img-responsive" src="{{ plugin_path('PlentyPluginShowcase') }}/images/devguide/Ceres_PageDesign.png" />
                </figure>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

{% endblock %}