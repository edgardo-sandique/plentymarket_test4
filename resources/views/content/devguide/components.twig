{% extends 'PlentyPluginShowcase::templates.ExamplePage' %}

{% block Content %}

<h1 id="components-introduction">Introducing plugin components</h1>

<div class="api-docs-basics">
    <p>
        On this page, you will find a short description for each plugin element that you can use to create your own plugins. We will differentiate between components that define the core structure of the plugin usually found in the <strong>src</strong> folder and components for the design found in the <strong>resources</strong> folder. The programming language PHP 7 is mainly used for creating the files in the <strong>src</strong> folder. Technologies used in context with the <strong>resources</strong> folder are:
    </p>
    <ul>
      <li>
        Twig
      </li>
      <li>
        Vue.js
      </li>
      <li>
        SASS
      </li>
      <li>
        Bootstrap 4
      </li>
      <li>
        jQuery
      </li>
    </ul>
</div>

<h1 id="components-core">Core components</h1>

<div class="api-docs-basics">
    <p>
        Let's discuss the core structure of a plugin based on the <strong>src</strong> folder of the plentymarkets LayoutCore plugin and the sub-folders and files contained in this folder.
    </p>
</div>

<h2 id="layoutcore-api">API</h2>

<div class="api-docs-basics">
    <p>
        The <strong>Api</strong> folder contains resources similar to controllers. The <code>ApiResource.php</code> is a class that extends a controller and enables self-defined REST calls with the related PHP methods. A list of response codes and functions for event registration are saved in <code>ApiResponse.php</code>. Specific REST calls, such as the <code>update ( string $shippingProfileId )</code> function in the example below, are defined in files in the <strong>Resources</strong> sub-folder.
    </p>
</div>

<div class="route-container">
  <code>PluginLayoutCore/src/Api/Resources/ShippingResource.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums">
&lt;?php //strict

    namespace LayoutCore\Api\Resources;

    use Symfony\Component\HttpFoundation\Response as BaseResponse;
    use Plenty\Plugin\Http\Response;
    use Plenty\Plugin\Http\Request;
    use LayoutCore\Api\ApiResource;
    use LayoutCore\Api\ApiResponse;
    use LayoutCore\Api\ResponseCode;
    use LayoutCore\Services\ShippingService;

    /**
     * Class ShippingResource
     * @package LayoutCore\Api\Resources
     */
    class ShippingResource extends ApiResource
    {

    	/**
    	 * @var ShippingService
    	 */
    	private $shippingService;

        /**
         * ShippingResource constructor.
         * @param Request $request
         * @param ApiResponse $response
         * @param ShippingService $shippingService
         */
    	public function __construct(Request $request, ApiResponse $response, ShippingService $shippingService)
    	{
    		parent::__construct($request, $response);
    		$this->shippingService = $shippingService;
    	}

    	// Put/Patch
        /**
         * Set the shipping profile
         * @param string $shippingProfileId
         * @return BaseResponse
         */
    	public function update(string $shippingProfileId):BaseResponse
    	{
    		$this->shippingService->setShippingProfileId((int)$shippingProfileId);
    		return $this->response->create(ResponseCode::OK);
    	}

    }
</pre>
</div>

<h2 id="layoutcore-builder">Builder</h2>

<div class="api-docs-basics">
    <p>
        The builder class helps you work with interfaces. <code>ItemColumnBuilder.php</code>, for example, builds an array of <a href="/api-doc/Item#datalayer_item">ItemDataLayer</a> columns that can be requested with the <code>search</code> method. The fields for this array are defined in the related files in the <strong>Fields</strong> folder.
    </p>
</div>

<div class="route-container">
  <code>PluginLayoutCore/src/Builder/Item/ItemColumnBuilder.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums">
&lt;?php //strict

    namespace LayoutCore\Builder\Item;

    use LayoutCore\Builder\Item\Fields\ItemBaseFields;

    ...

    /**
     * Build array of ItemDataLayer columns to request from ItemDataLayerRepository::search
     */
    class ItemColumnBuilder
    {
    	/**
    	 * @var array>
    	 */
    	private $columnFields = [];
    	/**
    	 * @var array>
    	 */
    	private $columnParams = [];

    	public function defaults():ItemColumnBuilder
    	{
    		return $this
    			->withItemBase([
    				               ItemBaseFields::ID,
    				               ItemBaseFields::RATING,
    				               ItemBaseFields::RATING_COUNT,
    				               ItemBaseFields::STORE_SPECIAL,
    				               ItemBaseFields::PRODUCER,
    				               ItemBaseFields::PRODUCING_COUNTRY_ID,
    				               ItemBaseFields::CONDITION,
    				               ItemBaseFields::AGE_RESTRICTION,
    				               ItemBaseFields::CUSTOMS_TARIFF_NUMBER
    			               ])
      }

    ...
</pre>
</div>

<div class="api-docs-basics">
    <p>
        This array can be included in services, such as <code>ItemService.php</code>. Builders also help you validate your code through auto-completion.
    </p>
</div>

<div class="route-container">
  <code>PluginLayoutCore/src/Services/ItemService.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums">
&lt;?php //strict

    namespace LayoutCore\Services;

    ...

        public function getItems(array $itemIds):RecordList
        {
            $columns = $this->columnBuilder
                ->defaults()
                ->build();

                ...

        }
</pre>
</div>

<h2 id="layoutcore-constants">Constants</h2>

<div class="api-docs-basics">
    <p>
        Constants, e.g. available languages or category types, are organised in the <strong>Constants</strong> folder.
    </p>
</div>

<h2 id="layoutcore-controllers">Controllers</h2>

<div class="api-docs-basics">
    <p>
        Controllers are the interface between the core and the design. The sub-folder <strong>Controllers</strong> contains the different controllers necessary to render Callisto 4. The file <code>LoginController.php</code>, for example, contains the <code>showLogin</code> function for rendering the <code>login.twig</code> template.
    </p>
</div>

<div class="route-container">
  <code>PluginLayoutCore/src/Controllers/LoginController.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums">
&lt;?php //strict

    namespace LayoutCore\Controllers;

    use LayoutCore\Helper\TemplateContainer;

    class LoginController extends LayoutController
    {
    	public function showLogin(): string
    	{
    		return $this->renderTemplate(
    			"tpl.login",
    			[
    				"login" => ""
    			]
    		);
    	}
    }
</pre>
</div>

<h2 id="layoutcore-extensions">Extensions</h2>

<div class="api-docs-basics">
    <p>
        The <strong>Extensions</strong> folder stores components that extend the functionality of Twig. <a href="http://twig.sensiolabs.org/doc/advanced_legacy.html" target="_blank">Extensions</a> can be operators, global variables, functions, etc. Twig also allows you to <a href="http://twig.sensiolabs.org/doc/advanced.html#filters" target="_blank">create your own filters</a>. <code>TwigLayoutCoreExtension.php</code>, for example, uses filters stored in the <strong>Filters</strong> sub-folder. <code>NumberFormatFilter.php</code> provides methods for formatting numbers and currencies that can be included in twig templates.
    </p>
</div>

<div class="route-container">
  <code>PluginLayoutCore/src/Extensions/Filters/NumberFormatFilter.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums">
...

    public function formatCurrency(float $value, string $currencyISO):string
    {
      $locale            = 'de_DE';
      $useCurrencySymbol = true;

      $formatter = numfmt_create($locale, \NumberFormatter::CURRENCY);
      if(!$useCurrencySymbol)
      {
        $formatter->setTextAttribute(\NumberFormatter::CURRENCY_CODE, $currencyISO);
        $formatter->setSymbol(\NumberFormatter::CURRENCY_SYMBOL, $currencyISO);
      }

      if($this->config->get('PluginLayoutCore.format.use_locale_currency_format') === "0")
      {
        $decimal_separator   = $this->config->get('PluginLayoutCore.format.separator_decimal');
        $thousands_separator = $this->config->get('PluginLayoutCore.format.separator_thousands');
        $formatter->setSymbol(\NumberFormatter::MONETARY_SEPARATOR_SYMBOL, $decimal_separator);
        $formatter->setSymbol(\NumberFormatter::MONETARY_GROUPING_SEPARATOR_SYMBOL, $thousands_separator);
      }
      return $formatter->format($value);
    }
</pre>
</div>

<div class="api-docs-basics">
    <p>
        In your template, add this method using the pipe within the twig variable. In the example below, the item price will be formatted by adding the ISO code <strong>EUR</strong> to the price.
    </p>
</div>

<div class="code-container">
{% raw %}
<pre class="prettyprint lang-twig grey-back">
{{item.price | formatCurrency ("EUR")}}
</pre>
{% endraw %}
</div>

<h2 id="layoutcore-helper">Helper</h2>

<div class="api-docs-basics">
    <p>
        The <strong>Helper</strong> folder contains helper classes. <code>TemplateContainer.php</code>, for example, is a class that controls the data exchange between the Callisto 4 plugin and the LayoutCore plugin.
    </p>
</div>

<h2 id="layoutcore-providers">Providers</h2>

<div class="api-docs-basics">
    <p>
        Two types of providers are used in plentymarkets plugins: service providers and route service providers.
    </p>
</div>

<h3 id="layoutcore-serviceprovider">Service Providers</h3>

<div class="api-docs-basics">
    <p>
        Figuratively speaking, the service provider is the starting point of the plugin. Every plugin must have a service provider, which is needed to register the route service provider. All service providers extend the <code>Plenty\Plugin\ServiceProvider</code> class. In the case of Callisto 4, the service provider is also used to boot the design and add various extensions.
    </p>
</div>

<h3 id="layoutcore-routeserviceprovider">Route Service Providers</h3>

<div class="api-docs-basics">
    <p>
        Routes are used to point URLs to controllers or anonymous functions that should be executed when a user accesses a given page.

        In line 20 of the example below, the function <code>showLogin</code> is executed when a user opens the <code>/login</code> page. This function is defined in <strong>LoginController.php</strong>.
    </p>
</div>
<div class="route-container">
  <code>PluginLayoutCore/src/Providers/LayoutCoreRouteServiceProvider.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums">
&lt;?php //strict

    namespace LayoutCore\Providers;


    use Plenty\Plugin\RouteServiceProvider;
    use Plenty\Plugin\Routing\Router;
    use Plenty\Plugin\Routing\ApiRouter;
    use Plenty\Plugin\Templates\Twig;

    class LayoutCoreRouteServiceProvider extends RouteServiceProvider

    ...

    {
        public function map(Router $router, ApiRouter $api)
        {
          ...

          $router->get('login', 'LayoutCore\Controllers\LoginController@showLogin');

          ...

        }
    }
</pre>
</div>

<h2 id="layoutcore-services">Services</h2>

<div class="api-docs-basics">
    <p>
        Services contain the methods for processing data between the user and plentymarkets that can be used by controllers, REST and Twig templates. In the example below, <code>BasketService.php</code> contains the <code>getBasket()</code> method, which is used in <code>BasketResource.php</code>.
    </p>
</div>

<div class="route-container">
  <code>PluginLayoutCore/src/Services/BasketService.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums">
...

    /**
     * Return basket as array
     * @return Basket
     */
    public function getBasket():Basket
    {
      return $this->basketRepository->load();
    }

...
</pre>
</div>

<div class="api-docs-basics">
    <p>
        The example below shows how the <code>getBasket()</code> method is used in a REST call. An array of basket items and a response code are returned.
    </p>
</div>

<div class="route-container">
  <code>PluginLayoutCore/src/Api/Resources/BasketResource.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums">
&lt;?php //strict

    namespace LayoutCore\Api\Resources;

    use Symfony\Component\HttpFoundation\Response as BaseResponse;
    use Plenty\Plugin\Http\Response;
    use Plenty\Plugin\Http\Request;
    use LayoutCore\Api\ApiResource;
    use LayoutCore\Api\ApiResponse;
    use LayoutCore\Api\ResponseCode;
    use LayoutCore\Services\BasketService;

    /**
     * Class BasketResource
     * @package LayoutCore\Api\Resources
     */
    class BasketResource extends ApiResource
    {
    	/**
    	 * @var BasketService
    	 */
    	private $basketService;

        /**
         * BasketResource constructor.
         * @param Request $request
         * @param ApiResponse $response
         * @param BasketService $basketService
         */
    	public function __construct(Request $request, ApiResponse $response, BasketService $basketService)
    	{
    		parent::__construct($request, $response);
    		$this->basketService = $basketService;
    	}

        /**
         * Get the basket
         * @return BaseResponse
         */
    	public function index():BaseResponse
    	{
    		$basket = $this->basketService->getBasket();
    		return $this->response->create($basket, ResponseCode::OK);
    	}
    }
</pre>
</div>

<h1 id="components-design">Design components</h1>

<div class="api-docs-basics">
    <p>
        We will explain the design structure of a plugin based on the <strong>resources</strong> folder of the plentymarkets Callisto 4 plugin and its sub-folders.
    </p>
</div>

<h2 id="design-css">CSS</h2>

<div class="api-docs-basics">
    <p>
        The <strong>css</strong> folder contains the CSS files based on <a href="http://v4-alpha.getbootstrap.com/components/card/" target="_blank">Bootstrap 4</a>.
    </p>
</div>

<h2 id="design-documents">Documents</h2>

<div class="api-docs-basics">
    <p>
        The <strong>documents</strong> folder contains fonts, pdf-files and other document resources.
    </p>
</div>

<h2 id="design-images">Images</h2>

<div class="api-docs-basics">
    <p>
        Images, such as the company logo, are stored in the <strong>images</strong> folder.
    </p>
</div>

<h2 id="design-js">JS</h2>

<div class="api-docs-basics">
    <p>
        This is the folder for JavaScript files. The <strong>js</strong> folder contains the <strong>dist</strong> and <strong>src</strong> sub-folders. The source files are organised in the <strong>src</strong> folder. These source files are required for building <code>plugin-callisto-app.js</code> - the main JavaScript file, which is included in <code>PageDesign.twig</code>.
    </p>
</div>
<div class="route-container">
  <code>PluginCallisto/resources/views/PageDesign.twig</code>
</div>
<div class="code-container">
{% raw %}
<pre class="prettyprint lang-twig grey-back"><span><</span>script src="{{ plugin_path('PluginCallisto') }}/js/dist/plugin-callisto-app.js"><span><</span>/script></pre>
{% endraw %}
</div>

<div class="api-docs-basics">
    <p>
        The sub-folders <strong>app</strong> and <strong>libraries</strong> are located in <strong>src</strong>. All Vue.js components are saved in <strong>app/components</strong>. Related Twig templates can be found in the <strong>resources/views/templates</strong> folder. <a href="https://vuejs.org/guide/custom-directive.html" target="_blank">Custom Vue.js directives</a>, e.g. the <code>Logout.js</code>, can be found in the <strong>app/directives</strong> folders.
    </p>
</div>
<div class="route-container">
  <code>PluginCallisto/resources/js/src/app/directives/Logout.js</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-js grey-back linenums">
var ApiService          = require('services/ApiService');
var NotificationService = require('services/NotificationService');

    Vue.directive('logout', function ()
    {

      $(this.el).click(
        function (e)
        {
          ApiService.post("/rest/account/logout")
          .done(
            function(response)
            {
              NotificationService.success('Sie wurden erfolgreich ausgeloggt.').closeAfter(3000);
            }
          );

          e.preventDefault();

        }.bind(this));

    });
</pre>
</div>
<div>
    <p>
      Services are saved in the <strong>app/services</strong> folder, e.g. the <code>ApiService.js</code> service for sending REST calls.
    </p>
</div>

<div class="route-container">
  <code>PluginCallisto/resources/js/src/app/services/ApiService.js</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-js grey-back linenums">
var NotificationService = require('services/NotificationService');
var WaitScreenService = require('services/WaitScreenService');

module.exports = (function($) {

    var _token;

    return {
        get:    _get,
        put:    _put,
        post:   _post,
        delete: _delete,
        send:   _send,
        setToken: _setToken,
        getToken: _getToken
    };

    function _get( url, data, config )
    {
        config = config || {};
        config.method = 'GET';
        return _send( url, data, config );
    }

    ...
</pre>
</div>

<h2 id="design-scss">SCSS</h2>

<div class="api-docs-basics">
    <p>
        In this folder, the <code>PluginCallisto.scss</code> file imports all the other SCSS files stored in sub-folders. A grunt task generates the <code>plugin-callisto.css</code> file that can be found in the <strong>resources/css</strong> folder.
    </p>
</div>

<h2 id="design-views">Views</h2>

<div class="api-docs-basics">
    <p>
        The <strong>views</strong> folder contains the <code>PageDesign.twig</code> file - the basic framework for your online store. Static content pages, such as the login page, are organised in sub-folders with the related <code>twig</code> files. Vue.js related template files are organised into multiple sub-folders within the <strong>Templates</strong> folder. These files are necessary for rendering dynamic content of the Vue.js components stored in the folder <strong>resources/js/src/app/components</strong>.
    </p>
</div>

    <h1 id="components-payment">Payment components</h1>

    <div class="api-docs-basics">
        <p>
            Find an explanation of payment components below. These components are used in the <a href="https://github.com/plentymarkets/plugin-payment-paypal" target="_blank">PayPal plugin</a> developed by plentymarkets. This plugin can be used as a reference for other payment plugins. Payment components can be found in the <b>src</b> and <b>resources</b> folder.
        </p>
    </div>

    <h2 id="design-views">Events</h2>

    <div class="api-docs-basics">
        <p>
            The <strong>src/events</strong> folder contains the <code>RefundEventProcedure.php</code> file and other files that are used to integrate event procedures for the payment method in plentymarkets. For detailed information about event procedures, refer to <a href="https://www.plentymarkets.co.uk/manual/settings/orders/event-procedures/new-event-procedure/" target="_blank">New event procedure</a>. Under <b>Procedures</b>, the procedure type <b>Plugins</b> is available. All event procedures that are registered in a plugin, will be listed under the <b>Plugins</b> procedure type.
        </p>

        <figure>
            <a data-toggle="modal" data-target="#modal1" href="#">
                <img class="img-responsive img-pretty" src="{{ plugin_path('PlentyPluginShowcase') }}/images/backend-event-procedures.png" />
            </a>
        </figure>
    </div>
    <div class="route-container">
        <code>PayPal/src/events/RefundEventProcedure.php</code>
    </div>
    <div class="code-container">
<pre class="prettyprint lang-php grey-back linenums">
&lt;?php
    namespace PayPal\Events;

    use Plenty\Modules\Order\Models\Order;
    use Plenty\Modules\EventAction\Events\EventActionTriggered;
    use PayPal\Services\PaymentService;
    use PayPal\Helper\PaymentHelper;

    /**
     * Class RefundEventAction
     * @package PayPal\Events
     */
    class RefundEventAction
    {
        /**
         * @param EventActionTriggered  $eventTriggered
         */
        public function run(EventActionTriggered $eventTriggered, PaymentService $paymentService, PaymentHelper $paymentHelper)
        {
            /** @var Order $order */
            $order = $eventTriggered->getOrder();
    ...
</pre>
    </div>
    <div class="alert alert-info" role="alert">
        <b>Explanation</b>: ##
    </div>

    <div class="api-docs-basics">
        <p>
            The event procedure must be registered in the ServiceProvider.
        </p>
    </div>
    <div class="route-container">
        <code>PayPal/src/providers/PayPalServiceProvider.php</code>
    </div>
    <div class="code-container">
<pre class="prettyprint lang-php grey-back linenums">
&lt;?php
    namespace PayPal\Providers;

    use Plenty\Modules\EventAction\Services\Entries\ActionEntry;
    use Plenty\Modules\EventAction\Services\EventActionService;

    ...

    use PayPal\Events\RefundEventAction;

    ...

    /**
     * Class PayPalServiceProvider
     * @package PayPal\Providers
     */
    class PayPalServiceProvider extends ServiceProvider
    {

          /**
           * Register the route service provider and bind event procedures
           */
          public function register()
          {
              $this->getApplication()->register(PayPalRouteServiceProvider::class);
              $this->getApplication()->bind(RefundEventAction::class);
          }

    ...

                // Register PayPal Refund Event Action
                $eventActionService->registerAction('plentyPayPal',
                                                    ActionEntry::ACTION_GROUP_ORDER,
                                                    [   'de' => 'Rückzahlung der PayPal-Zahlung',
                                                        'en' => 'Refund the PayPal payment'],
                                                    '\PayPal\Events\RefundEventAction@run');

    ...
</pre>
    </div>

    <div class="alert alert-info" role="alert">
        <b>Explanation</b>: ##
    </div>

    <!-- Modal -->
    <div class="modal fade" id="modal1" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog img-horizontal" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">Add procedure: Plugins</h4>
                </div>
                <div class="modal-body">
                    <figure>
                        <img class="img-responsive" src="{{ plugin_path('PlentyPluginShowcase') }}/images/backend-event-procedures.png" />
                    </figure>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

{% endblock %}
